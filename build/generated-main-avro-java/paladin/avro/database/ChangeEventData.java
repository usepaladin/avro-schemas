/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package paladin.avro.database;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ChangeEventData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4274081607695191452L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ChangeEventData\",\"namespace\":\"paladin.avro.database\",\"fields\":[{\"name\":\"operation\",\"type\":{\"type\":\"enum\",\"name\":\"ChangeEventOperation\",\"symbols\":[\"CREATE\",\"UPDATE\",\"DELETE\",\"SNAPSHOT\",\"OTHER\"]}},{\"name\":\"before\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"after\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"timestamp\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"table\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ChangeEventData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ChangeEventData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ChangeEventData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ChangeEventData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ChangeEventData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ChangeEventData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ChangeEventData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ChangeEventData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ChangeEventData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  public paladin.avro.database.ChangeEventOperation operation;
  public java.util.Map<java.lang.String,java.lang.String> before;
  public java.util.Map<java.lang.String,java.lang.String> after;
  public java.util.Map<java.lang.String,java.lang.String> source;
  public java.lang.Long timestamp;
  public java.lang.String table;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ChangeEventData() {}

  /**
   * All-args constructor.
   * @param operation The new value for operation
   * @param before The new value for before
   * @param after The new value for after
   * @param source The new value for source
   * @param timestamp The new value for timestamp
   * @param table The new value for table
   */
  public ChangeEventData(paladin.avro.database.ChangeEventOperation operation, java.util.Map<java.lang.String,java.lang.String> before, java.util.Map<java.lang.String,java.lang.String> after, java.util.Map<java.lang.String,java.lang.String> source, java.lang.Long timestamp, java.lang.String table) {
    this.operation = operation;
    this.before = before;
    this.after = after;
    this.source = source;
    this.timestamp = timestamp;
    this.table = table;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return operation;
    case 1: return before;
    case 2: return after;
    case 3: return source;
    case 4: return timestamp;
    case 5: return table;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: operation = (paladin.avro.database.ChangeEventOperation)value$; break;
    case 1: before = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 2: after = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 3: source = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 4: timestamp = (java.lang.Long)value$; break;
    case 5: table = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'operation' field.
   * @return The value of the 'operation' field.
   */
  public paladin.avro.database.ChangeEventOperation getOperation() {
    return operation;
  }


  /**
   * Sets the value of the 'operation' field.
   * @param value the value to set.
   */
  public void setOperation(paladin.avro.database.ChangeEventOperation value) {
    this.operation = value;
  }

  /**
   * Gets the value of the 'before' field.
   * @return The value of the 'before' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getBefore() {
    return before;
  }


  /**
   * Sets the value of the 'before' field.
   * @param value the value to set.
   */
  public void setBefore(java.util.Map<java.lang.String,java.lang.String> value) {
    this.before = value;
  }

  /**
   * Gets the value of the 'after' field.
   * @return The value of the 'after' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getAfter() {
    return after;
  }


  /**
   * Sets the value of the 'after' field.
   * @param value the value to set.
   */
  public void setAfter(java.util.Map<java.lang.String,java.lang.String> value) {
    this.after = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.util.Map<java.lang.String,java.lang.String> value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'table' field.
   * @return The value of the 'table' field.
   */
  public java.lang.String getTable() {
    return table;
  }


  /**
   * Sets the value of the 'table' field.
   * @param value the value to set.
   */
  public void setTable(java.lang.String value) {
    this.table = value;
  }

  /**
   * Creates a new ChangeEventData RecordBuilder.
   * @return A new ChangeEventData RecordBuilder
   */
  public static paladin.avro.database.ChangeEventData.Builder newBuilder() {
    return new paladin.avro.database.ChangeEventData.Builder();
  }

  /**
   * Creates a new ChangeEventData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ChangeEventData RecordBuilder
   */
  public static paladin.avro.database.ChangeEventData.Builder newBuilder(paladin.avro.database.ChangeEventData.Builder other) {
    if (other == null) {
      return new paladin.avro.database.ChangeEventData.Builder();
    } else {
      return new paladin.avro.database.ChangeEventData.Builder(other);
    }
  }

  /**
   * Creates a new ChangeEventData RecordBuilder by copying an existing ChangeEventData instance.
   * @param other The existing instance to copy.
   * @return A new ChangeEventData RecordBuilder
   */
  public static paladin.avro.database.ChangeEventData.Builder newBuilder(paladin.avro.database.ChangeEventData other) {
    if (other == null) {
      return new paladin.avro.database.ChangeEventData.Builder();
    } else {
      return new paladin.avro.database.ChangeEventData.Builder(other);
    }
  }

  /**
   * RecordBuilder for ChangeEventData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ChangeEventData>
    implements org.apache.avro.data.RecordBuilder<ChangeEventData> {

    private paladin.avro.database.ChangeEventOperation operation;
    private java.util.Map<java.lang.String,java.lang.String> before;
    private java.util.Map<java.lang.String,java.lang.String> after;
    private java.util.Map<java.lang.String,java.lang.String> source;
    private java.lang.Long timestamp;
    private java.lang.String table;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(paladin.avro.database.ChangeEventData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.operation)) {
        this.operation = data().deepCopy(fields()[0].schema(), other.operation);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.before)) {
        this.before = data().deepCopy(fields()[1].schema(), other.before);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.after)) {
        this.after = data().deepCopy(fields()[2].schema(), other.after);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.source)) {
        this.source = data().deepCopy(fields()[3].schema(), other.source);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.table)) {
        this.table = data().deepCopy(fields()[5].schema(), other.table);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing ChangeEventData instance
     * @param other The existing instance to copy.
     */
    private Builder(paladin.avro.database.ChangeEventData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.operation)) {
        this.operation = data().deepCopy(fields()[0].schema(), other.operation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.before)) {
        this.before = data().deepCopy(fields()[1].schema(), other.before);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.after)) {
        this.after = data().deepCopy(fields()[2].schema(), other.after);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.source)) {
        this.source = data().deepCopy(fields()[3].schema(), other.source);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.table)) {
        this.table = data().deepCopy(fields()[5].schema(), other.table);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'operation' field.
      * @return The value.
      */
    public paladin.avro.database.ChangeEventOperation getOperation() {
      return operation;
    }


    /**
      * Sets the value of the 'operation' field.
      * @param value The value of 'operation'.
      * @return This builder.
      */
    public paladin.avro.database.ChangeEventData.Builder setOperation(paladin.avro.database.ChangeEventOperation value) {
      validate(fields()[0], value);
      this.operation = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'operation' field has been set.
      * @return True if the 'operation' field has been set, false otherwise.
      */
    public boolean hasOperation() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'operation' field.
      * @return This builder.
      */
    public paladin.avro.database.ChangeEventData.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'before' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getBefore() {
      return before;
    }


    /**
      * Sets the value of the 'before' field.
      * @param value The value of 'before'.
      * @return This builder.
      */
    public paladin.avro.database.ChangeEventData.Builder setBefore(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[1], value);
      this.before = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'before' field has been set.
      * @return True if the 'before' field has been set, false otherwise.
      */
    public boolean hasBefore() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'before' field.
      * @return This builder.
      */
    public paladin.avro.database.ChangeEventData.Builder clearBefore() {
      before = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'after' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getAfter() {
      return after;
    }


    /**
      * Sets the value of the 'after' field.
      * @param value The value of 'after'.
      * @return This builder.
      */
    public paladin.avro.database.ChangeEventData.Builder setAfter(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[2], value);
      this.after = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'after' field has been set.
      * @return True if the 'after' field has been set, false otherwise.
      */
    public boolean hasAfter() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'after' field.
      * @return This builder.
      */
    public paladin.avro.database.ChangeEventData.Builder clearAfter() {
      after = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public paladin.avro.database.ChangeEventData.Builder setSource(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[3], value);
      this.source = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public paladin.avro.database.ChangeEventData.Builder clearSource() {
      source = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public paladin.avro.database.ChangeEventData.Builder setTimestamp(java.lang.Long value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public paladin.avro.database.ChangeEventData.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'table' field.
      * @return The value.
      */
    public java.lang.String getTable() {
      return table;
    }


    /**
      * Sets the value of the 'table' field.
      * @param value The value of 'table'.
      * @return This builder.
      */
    public paladin.avro.database.ChangeEventData.Builder setTable(java.lang.String value) {
      validate(fields()[5], value);
      this.table = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'table' field has been set.
      * @return True if the 'table' field has been set, false otherwise.
      */
    public boolean hasTable() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'table' field.
      * @return This builder.
      */
    public paladin.avro.database.ChangeEventData.Builder clearTable() {
      table = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ChangeEventData build() {
      try {
        ChangeEventData record = new ChangeEventData();
        record.operation = fieldSetFlags()[0] ? this.operation : (paladin.avro.database.ChangeEventOperation) defaultValue(fields()[0]);
        record.before = fieldSetFlags()[1] ? this.before : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[1]);
        record.after = fieldSetFlags()[2] ? this.after : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[2]);
        record.source = fieldSetFlags()[3] ? this.source : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.lang.Long) defaultValue(fields()[4]);
        record.table = fieldSetFlags()[5] ? this.table : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ChangeEventData>
    WRITER$ = (org.apache.avro.io.DatumWriter<ChangeEventData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ChangeEventData>
    READER$ = (org.apache.avro.io.DatumReader<ChangeEventData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.operation.ordinal());

    if (this.before == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.before.size();
      out.writeMapStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.String> e0: this.before.entrySet()) {
        actualSize0++;
        out.startItem();
        out.writeString(e0.getKey());
        java.lang.String v0 = e0.getValue();
        out.writeString(v0);
      }
      out.writeMapEnd();
      if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.after == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.after.size();
      out.writeMapStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.String> e1: this.after.entrySet()) {
        actualSize1++;
        out.startItem();
        out.writeString(e1.getKey());
        java.lang.String v1 = e1.getValue();
        out.writeString(v1);
      }
      out.writeMapEnd();
      if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

    if (this.source == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size2 = this.source.size();
      out.writeMapStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.String> e2: this.source.entrySet()) {
        actualSize2++;
        out.startItem();
        out.writeString(e2.getKey());
        java.lang.String v2 = e2.getValue();
        out.writeString(v2);
      }
      out.writeMapEnd();
      if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }

    if (this.timestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.timestamp);
    }

    if (this.table == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.table);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.operation = paladin.avro.database.ChangeEventOperation.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.before = null;
      } else {
        long size0 = in.readMapStart();
        java.util.Map<java.lang.String,java.lang.String> m0 = this.before; // Need fresh name due to limitation of macro system
        if (m0 == null) {
          m0 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size0);
          this.before = m0;
        } else m0.clear();
        for ( ; 0 < size0; size0 = in.mapNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.String k0 = null;
            k0 = in.readString();
            java.lang.String v0 = null;
            v0 = in.readString();
            m0.put(k0, v0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.after = null;
      } else {
        long size1 = in.readMapStart();
        java.util.Map<java.lang.String,java.lang.String> m1 = this.after; // Need fresh name due to limitation of macro system
        if (m1 == null) {
          m1 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size1);
          this.after = m1;
        } else m1.clear();
        for ( ; 0 < size1; size1 = in.mapNext()) {
          for ( ; size1 != 0; size1--) {
            java.lang.String k1 = null;
            k1 = in.readString();
            java.lang.String v1 = null;
            v1 = in.readString();
            m1.put(k1, v1);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.source = null;
      } else {
        long size2 = in.readMapStart();
        java.util.Map<java.lang.String,java.lang.String> m2 = this.source; // Need fresh name due to limitation of macro system
        if (m2 == null) {
          m2 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size2);
          this.source = m2;
        } else m2.clear();
        for ( ; 0 < size2; size2 = in.mapNext()) {
          for ( ; size2 != 0; size2--) {
            java.lang.String k2 = null;
            k2 = in.readString();
            java.lang.String v2 = null;
            v2 = in.readString();
            m2.put(k2, v2);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.timestamp = null;
      } else {
        this.timestamp = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.table = null;
      } else {
        this.table = in.readString();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.operation = paladin.avro.database.ChangeEventOperation.values()[in.readEnum()];
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.before = null;
          } else {
            long size0 = in.readMapStart();
            java.util.Map<java.lang.String,java.lang.String> m0 = this.before; // Need fresh name due to limitation of macro system
            if (m0 == null) {
              m0 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size0);
              this.before = m0;
            } else m0.clear();
            for ( ; 0 < size0; size0 = in.mapNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.String k0 = null;
                k0 = in.readString();
                java.lang.String v0 = null;
                v0 = in.readString();
                m0.put(k0, v0);
              }
            }
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.after = null;
          } else {
            long size1 = in.readMapStart();
            java.util.Map<java.lang.String,java.lang.String> m1 = this.after; // Need fresh name due to limitation of macro system
            if (m1 == null) {
              m1 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size1);
              this.after = m1;
            } else m1.clear();
            for ( ; 0 < size1; size1 = in.mapNext()) {
              for ( ; size1 != 0; size1--) {
                java.lang.String k1 = null;
                k1 = in.readString();
                java.lang.String v1 = null;
                v1 = in.readString();
                m1.put(k1, v1);
              }
            }
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.source = null;
          } else {
            long size2 = in.readMapStart();
            java.util.Map<java.lang.String,java.lang.String> m2 = this.source; // Need fresh name due to limitation of macro system
            if (m2 == null) {
              m2 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size2);
              this.source = m2;
            } else m2.clear();
            for ( ; 0 < size2; size2 = in.mapNext()) {
              for ( ; size2 != 0; size2--) {
                java.lang.String k2 = null;
                k2 = in.readString();
                java.lang.String v2 = null;
                v2 = in.readString();
                m2.put(k2, v2);
              }
            }
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.timestamp = null;
          } else {
            this.timestamp = in.readLong();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.table = null;
          } else {
            this.table = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










