/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package paladin.avro.database;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** This is an avro schema representing the key that is used when an event is passed to the event router, to be redirected to its target message broker */
@org.apache.avro.specific.AvroGenerated
public class DatabaseEventRouterValueAv extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8172763031115661218L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DatabaseEventRouterValueAv\",\"namespace\":\"paladin.avro.database\",\"doc\":\"This is an avro schema representing the key that is used when an event is passed to the event router, to be redirected to its target message broker\",\"fields\":[{\"name\":\"brokerName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The Unique configured identifier of the broker to relay the message to\"},{\"name\":\"brokerType\",\"type\":{\"type\":\"enum\",\"name\":\"BrokerType\",\"symbols\":[\"KAFKA\",\"RABBITMQ\",\"SQS\",\"KINESIS\",\"PULSAR\"]},\"doc\":\"The type of Message Broker to relay the message to\"},{\"name\":\"brokerFormat\",\"type\":{\"type\":\"enum\",\"name\":\"BrokerFormat\",\"symbols\":[\"AVRO\",\"JSON\",\"PROTOBUF\"]},\"doc\":\"The format of the message to be relayed\"},{\"name\":\"payload\",\"type\":{\"type\":\"record\",\"name\":\"ChangeEventData\",\"fields\":[{\"name\":\"operation\",\"type\":{\"type\":\"enum\",\"name\":\"ChangeEventOperation\",\"symbols\":[\"CREATE\",\"UPDATE\",\"DELETE\",\"SNAPSHOT\",\"OTHER\"]}},{\"name\":\"before\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"after\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"timestamp\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"table\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]},\"doc\":\"The payload of the message to be relayed\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DatabaseEventRouterValueAv> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DatabaseEventRouterValueAv> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DatabaseEventRouterValueAv> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DatabaseEventRouterValueAv> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DatabaseEventRouterValueAv> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DatabaseEventRouterValueAv to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DatabaseEventRouterValueAv from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DatabaseEventRouterValueAv instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DatabaseEventRouterValueAv fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The Unique configured identifier of the broker to relay the message to */
  public java.lang.String brokerName;
  /** The type of Message Broker to relay the message to */
  public paladin.avro.database.BrokerType brokerType;
  /** The format of the message to be relayed */
  public paladin.avro.database.BrokerFormat brokerFormat;
  /** The payload of the message to be relayed */
  public paladin.avro.database.ChangeEventData payload;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DatabaseEventRouterValueAv() {}

  /**
   * All-args constructor.
   * @param brokerName The Unique configured identifier of the broker to relay the message to
   * @param brokerType The type of Message Broker to relay the message to
   * @param brokerFormat The format of the message to be relayed
   * @param payload The payload of the message to be relayed
   */
  public DatabaseEventRouterValueAv(java.lang.String brokerName, paladin.avro.database.BrokerType brokerType, paladin.avro.database.BrokerFormat brokerFormat, paladin.avro.database.ChangeEventData payload) {
    this.brokerName = brokerName;
    this.brokerType = brokerType;
    this.brokerFormat = brokerFormat;
    this.payload = payload;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return brokerName;
    case 1: return brokerType;
    case 2: return brokerFormat;
    case 3: return payload;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: brokerName = value$ != null ? value$.toString() : null; break;
    case 1: brokerType = (paladin.avro.database.BrokerType)value$; break;
    case 2: brokerFormat = (paladin.avro.database.BrokerFormat)value$; break;
    case 3: payload = (paladin.avro.database.ChangeEventData)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'brokerName' field.
   * @return The Unique configured identifier of the broker to relay the message to
   */
  public java.lang.String getBrokerName() {
    return brokerName;
  }


  /**
   * Sets the value of the 'brokerName' field.
   * The Unique configured identifier of the broker to relay the message to
   * @param value the value to set.
   */
  public void setBrokerName(java.lang.String value) {
    this.brokerName = value;
  }

  /**
   * Gets the value of the 'brokerType' field.
   * @return The type of Message Broker to relay the message to
   */
  public paladin.avro.database.BrokerType getBrokerType() {
    return brokerType;
  }


  /**
   * Sets the value of the 'brokerType' field.
   * The type of Message Broker to relay the message to
   * @param value the value to set.
   */
  public void setBrokerType(paladin.avro.database.BrokerType value) {
    this.brokerType = value;
  }

  /**
   * Gets the value of the 'brokerFormat' field.
   * @return The format of the message to be relayed
   */
  public paladin.avro.database.BrokerFormat getBrokerFormat() {
    return brokerFormat;
  }


  /**
   * Sets the value of the 'brokerFormat' field.
   * The format of the message to be relayed
   * @param value the value to set.
   */
  public void setBrokerFormat(paladin.avro.database.BrokerFormat value) {
    this.brokerFormat = value;
  }

  /**
   * Gets the value of the 'payload' field.
   * @return The payload of the message to be relayed
   */
  public paladin.avro.database.ChangeEventData getPayload() {
    return payload;
  }


  /**
   * Sets the value of the 'payload' field.
   * The payload of the message to be relayed
   * @param value the value to set.
   */
  public void setPayload(paladin.avro.database.ChangeEventData value) {
    this.payload = value;
  }

  /**
   * Creates a new DatabaseEventRouterValueAv RecordBuilder.
   * @return A new DatabaseEventRouterValueAv RecordBuilder
   */
  public static paladin.avro.database.DatabaseEventRouterValueAv.Builder newBuilder() {
    return new paladin.avro.database.DatabaseEventRouterValueAv.Builder();
  }

  /**
   * Creates a new DatabaseEventRouterValueAv RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DatabaseEventRouterValueAv RecordBuilder
   */
  public static paladin.avro.database.DatabaseEventRouterValueAv.Builder newBuilder(paladin.avro.database.DatabaseEventRouterValueAv.Builder other) {
    if (other == null) {
      return new paladin.avro.database.DatabaseEventRouterValueAv.Builder();
    } else {
      return new paladin.avro.database.DatabaseEventRouterValueAv.Builder(other);
    }
  }

  /**
   * Creates a new DatabaseEventRouterValueAv RecordBuilder by copying an existing DatabaseEventRouterValueAv instance.
   * @param other The existing instance to copy.
   * @return A new DatabaseEventRouterValueAv RecordBuilder
   */
  public static paladin.avro.database.DatabaseEventRouterValueAv.Builder newBuilder(paladin.avro.database.DatabaseEventRouterValueAv other) {
    if (other == null) {
      return new paladin.avro.database.DatabaseEventRouterValueAv.Builder();
    } else {
      return new paladin.avro.database.DatabaseEventRouterValueAv.Builder(other);
    }
  }

  /**
   * RecordBuilder for DatabaseEventRouterValueAv instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DatabaseEventRouterValueAv>
    implements org.apache.avro.data.RecordBuilder<DatabaseEventRouterValueAv> {

    /** The Unique configured identifier of the broker to relay the message to */
    private java.lang.String brokerName;
    /** The type of Message Broker to relay the message to */
    private paladin.avro.database.BrokerType brokerType;
    /** The format of the message to be relayed */
    private paladin.avro.database.BrokerFormat brokerFormat;
    /** The payload of the message to be relayed */
    private paladin.avro.database.ChangeEventData payload;
    private paladin.avro.database.ChangeEventData.Builder payloadBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(paladin.avro.database.DatabaseEventRouterValueAv.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.brokerName)) {
        this.brokerName = data().deepCopy(fields()[0].schema(), other.brokerName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.brokerType)) {
        this.brokerType = data().deepCopy(fields()[1].schema(), other.brokerType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.brokerFormat)) {
        this.brokerFormat = data().deepCopy(fields()[2].schema(), other.brokerFormat);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.payload)) {
        this.payload = data().deepCopy(fields()[3].schema(), other.payload);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasPayloadBuilder()) {
        this.payloadBuilder = paladin.avro.database.ChangeEventData.newBuilder(other.getPayloadBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing DatabaseEventRouterValueAv instance
     * @param other The existing instance to copy.
     */
    private Builder(paladin.avro.database.DatabaseEventRouterValueAv other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.brokerName)) {
        this.brokerName = data().deepCopy(fields()[0].schema(), other.brokerName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.brokerType)) {
        this.brokerType = data().deepCopy(fields()[1].schema(), other.brokerType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.brokerFormat)) {
        this.brokerFormat = data().deepCopy(fields()[2].schema(), other.brokerFormat);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.payload)) {
        this.payload = data().deepCopy(fields()[3].schema(), other.payload);
        fieldSetFlags()[3] = true;
      }
      this.payloadBuilder = null;
    }

    /**
      * Gets the value of the 'brokerName' field.
      * The Unique configured identifier of the broker to relay the message to
      * @return The value.
      */
    public java.lang.String getBrokerName() {
      return brokerName;
    }


    /**
      * Sets the value of the 'brokerName' field.
      * The Unique configured identifier of the broker to relay the message to
      * @param value The value of 'brokerName'.
      * @return This builder.
      */
    public paladin.avro.database.DatabaseEventRouterValueAv.Builder setBrokerName(java.lang.String value) {
      validate(fields()[0], value);
      this.brokerName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'brokerName' field has been set.
      * The Unique configured identifier of the broker to relay the message to
      * @return True if the 'brokerName' field has been set, false otherwise.
      */
    public boolean hasBrokerName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'brokerName' field.
      * The Unique configured identifier of the broker to relay the message to
      * @return This builder.
      */
    public paladin.avro.database.DatabaseEventRouterValueAv.Builder clearBrokerName() {
      brokerName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'brokerType' field.
      * The type of Message Broker to relay the message to
      * @return The value.
      */
    public paladin.avro.database.BrokerType getBrokerType() {
      return brokerType;
    }


    /**
      * Sets the value of the 'brokerType' field.
      * The type of Message Broker to relay the message to
      * @param value The value of 'brokerType'.
      * @return This builder.
      */
    public paladin.avro.database.DatabaseEventRouterValueAv.Builder setBrokerType(paladin.avro.database.BrokerType value) {
      validate(fields()[1], value);
      this.brokerType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'brokerType' field has been set.
      * The type of Message Broker to relay the message to
      * @return True if the 'brokerType' field has been set, false otherwise.
      */
    public boolean hasBrokerType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'brokerType' field.
      * The type of Message Broker to relay the message to
      * @return This builder.
      */
    public paladin.avro.database.DatabaseEventRouterValueAv.Builder clearBrokerType() {
      brokerType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'brokerFormat' field.
      * The format of the message to be relayed
      * @return The value.
      */
    public paladin.avro.database.BrokerFormat getBrokerFormat() {
      return brokerFormat;
    }


    /**
      * Sets the value of the 'brokerFormat' field.
      * The format of the message to be relayed
      * @param value The value of 'brokerFormat'.
      * @return This builder.
      */
    public paladin.avro.database.DatabaseEventRouterValueAv.Builder setBrokerFormat(paladin.avro.database.BrokerFormat value) {
      validate(fields()[2], value);
      this.brokerFormat = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'brokerFormat' field has been set.
      * The format of the message to be relayed
      * @return True if the 'brokerFormat' field has been set, false otherwise.
      */
    public boolean hasBrokerFormat() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'brokerFormat' field.
      * The format of the message to be relayed
      * @return This builder.
      */
    public paladin.avro.database.DatabaseEventRouterValueAv.Builder clearBrokerFormat() {
      brokerFormat = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload' field.
      * The payload of the message to be relayed
      * @return The value.
      */
    public paladin.avro.database.ChangeEventData getPayload() {
      return payload;
    }


    /**
      * Sets the value of the 'payload' field.
      * The payload of the message to be relayed
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public paladin.avro.database.DatabaseEventRouterValueAv.Builder setPayload(paladin.avro.database.ChangeEventData value) {
      validate(fields()[3], value);
      this.payloadBuilder = null;
      this.payload = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * The payload of the message to be relayed
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'payload' field and creates one if it doesn't exist yet.
     * The payload of the message to be relayed
     * @return This builder.
     */
    public paladin.avro.database.ChangeEventData.Builder getPayloadBuilder() {
      if (payloadBuilder == null) {
        if (hasPayload()) {
          setPayloadBuilder(paladin.avro.database.ChangeEventData.newBuilder(payload));
        } else {
          setPayloadBuilder(paladin.avro.database.ChangeEventData.newBuilder());
        }
      }
      return payloadBuilder;
    }

    /**
     * Sets the Builder instance for the 'payload' field
     * The payload of the message to be relayed
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public paladin.avro.database.DatabaseEventRouterValueAv.Builder setPayloadBuilder(paladin.avro.database.ChangeEventData.Builder value) {
      clearPayload();
      payloadBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'payload' field has an active Builder instance
     * The payload of the message to be relayed
     * @return True if the 'payload' field has an active Builder instance
     */
    public boolean hasPayloadBuilder() {
      return payloadBuilder != null;
    }

    /**
      * Clears the value of the 'payload' field.
      * The payload of the message to be relayed
      * @return This builder.
      */
    public paladin.avro.database.DatabaseEventRouterValueAv.Builder clearPayload() {
      payload = null;
      payloadBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DatabaseEventRouterValueAv build() {
      try {
        DatabaseEventRouterValueAv record = new DatabaseEventRouterValueAv();
        record.brokerName = fieldSetFlags()[0] ? this.brokerName : (java.lang.String) defaultValue(fields()[0]);
        record.brokerType = fieldSetFlags()[1] ? this.brokerType : (paladin.avro.database.BrokerType) defaultValue(fields()[1]);
        record.brokerFormat = fieldSetFlags()[2] ? this.brokerFormat : (paladin.avro.database.BrokerFormat) defaultValue(fields()[2]);
        if (payloadBuilder != null) {
          try {
            record.payload = this.payloadBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("payload"));
            throw e;
          }
        } else {
          record.payload = fieldSetFlags()[3] ? this.payload : (paladin.avro.database.ChangeEventData) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DatabaseEventRouterValueAv>
    WRITER$ = (org.apache.avro.io.DatumWriter<DatabaseEventRouterValueAv>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DatabaseEventRouterValueAv>
    READER$ = (org.apache.avro.io.DatumReader<DatabaseEventRouterValueAv>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.brokerName);

    out.writeEnum(this.brokerType.ordinal());

    out.writeEnum(this.brokerFormat.ordinal());

    this.payload.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.brokerName = in.readString();

      this.brokerType = paladin.avro.database.BrokerType.values()[in.readEnum()];

      this.brokerFormat = paladin.avro.database.BrokerFormat.values()[in.readEnum()];

      if (this.payload == null) {
        this.payload = new paladin.avro.database.ChangeEventData();
      }
      this.payload.customDecode(in);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.brokerName = in.readString();
          break;

        case 1:
          this.brokerType = paladin.avro.database.BrokerType.values()[in.readEnum()];
          break;

        case 2:
          this.brokerFormat = paladin.avro.database.BrokerFormat.values()[in.readEnum()];
          break;

        case 3:
          if (this.payload == null) {
            this.payload = new paladin.avro.database.ChangeEventData();
          }
          this.payload.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










